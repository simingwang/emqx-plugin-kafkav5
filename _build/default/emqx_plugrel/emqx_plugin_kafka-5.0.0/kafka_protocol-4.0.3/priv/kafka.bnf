# generated code, do not edit!

#ApiKey: Produce, 0
ProduceRequestV0 => acks timeout [topic_data]
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV1 => acks timeout [topic_data]
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV2 => acks timeout [topic_data]
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV3 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV4 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV5 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV6 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV7 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceRequestV8 => transactional_id acks timeout [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout => INT32
  topic_data => topic [data]
    topic => STRING
    data => partition record_set
      partition => INT32
      record_set => RECORDS

# transactional_id: The transactional id or null if the producer is not transactional
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout: The time to await a response in ms.
# topic: Name of topic
# partition: Topic partition id


ProduceResponseV0 => [responses]
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset
      partition => INT32
      error_code => INT16
      base_offset => INT64

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code


ProduceResponseV1 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset
      partition => INT32
      error_code => INT16
      base_offset => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV2 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV3 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV4 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV5 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time log_start_offset
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The start offset of the log at the time this produce response was created
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV6 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time log_start_offset
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The start offset of the log at the time this produce response was created
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV7 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time log_start_offset
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The start offset of the log at the time this produce response was created
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


ProduceResponseV8 => [responses] throttle_time_ms
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code base_offset log_append_time log_start_offset [record_errors] error_message
      partition => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message
        batch_index => INT32
        batch_index_error_message => NULLABLE_STRING
      error_message => NULLABLE_STRING
  throttle_time_ms => INT32

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# log_append_time: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1. If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The start offset of the log at the time this produce response was created
# record_errors: The batch indices of records that caused the batch to be dropped
# batch_index: The batch index of the record that caused the batch to be dropped
# batch_index_error_message: The error message of the record that caused the batch to be dropped
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped
# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)


#ApiKey: Fetch, 1
FetchRequestV0 => replica_id max_wait_time min_bytes [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV1 => replica_id max_wait_time min_bytes [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV2 => replica_id max_wait_time min_bytes [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV3 => replica_id max_wait_time min_bytes max_bytes [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV4 => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV5 => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV6 => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.


FetchRequestV7 => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# session_id: The fetch session ID
# session_epoch: The fetch session epoch
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.
# forgotten_topics_data: Topics to remove from the fetch session.
# topic: Name of topic
# partitions: Partitions to remove from the fetch session.


FetchRequestV8 => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# session_id: The fetch session ID
# session_epoch: The fetch session epoch
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.
# forgotten_topics_data: Topics to remove from the fetch session.
# topic: Name of topic
# partitions: Partitions to remove from the fetch session.


FetchRequestV9 => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# session_id: The fetch session ID
# session_epoch: The fetch session epoch
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.
# forgotten_topics_data: Topics to remove from the fetch session.
# topic: Name of topic
# partitions: Partitions to remove from the fetch session.


FetchRequestV10 => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# session_id: The fetch session ID
# session_epoch: The fetch session epoch
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.
# forgotten_topics_data: Topics to remove from the fetch session.
# topic: Name of topic
# partitions: Partitions to remove from the fetch session.


FetchRequestV11 => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data] rack_id
  replica_id => INT32
  max_wait_time => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32
  rack_id => STRING

# replica_id: Broker id of the follower. For normal consumers, use -1.
# max_wait_time: Maximum time in ms to wait for the response.
# min_bytes: Minimum bytes to accumulate in the response.
# max_bytes: Maximum bytes to accumulate in the response. Note that this is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that progress can be made.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# session_id: The fetch session ID
# session_epoch: The fetch session epoch
# topics: Topics to fetch in the order provided.
# topic: Name of topic
# partitions: Partitions to fetch.
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# fetch_offset: Message offset.
# log_start_offset: Earliest available offset of the follower replica. The field is only used when request is sent by follower. 
# partition_max_bytes: Maximum bytes to fetch.
# forgotten_topics_data: Topics to remove from the fetch session.
# topic: Name of topic
# partitions: Partitions to remove from the fetch session.
# rack_id: The consumer's rack id


FetchResponseV0 => [responses]
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark
        partition => INT32
        error_code => INT16
        high_watermark => INT64
      record_set => RECORDS

# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.


FetchResponseV1 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark
        partition => INT32
        error_code => INT16
        high_watermark => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.


FetchResponseV2 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark
        partition => INT32
        error_code => INT16
        high_watermark => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.


FetchResponseV3 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark
        partition => INT32
        error_code => INT16
        high_watermark => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.


FetchResponseV4 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV5 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV6 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV7 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# session_id: The fetch session ID
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV8 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# session_id: The fetch session ID
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV9 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# session_id: The fetch session ID
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV10 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# session_id: The fetch session ID
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction


FetchResponseV11 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition_header record_set
      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] preferred_read_replica
        partition => INT32
        error_code => INT16
        high_watermark => INT64
        last_stable_offset => INT64
        log_start_offset => INT64
        aborted_transactions => producer_id first_offset
          producer_id => INT64
          first_offset => INT64
        preferred_read_replica => INT32
      record_set => RECORDS

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# session_id: The fetch session ID
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code
# high_watermark: Last committed offset.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)
# log_start_offset: Earliest available offset.
# producer_id: The producer id associated with the aborted transactions
# first_offset: The first offset in the aborted transaction
# preferred_read_replica: The ID of the replica that the consumer should prefer.


#ApiKey: ListOffsets, 2
ListOffsetsRequestV0 => replica_id [topics]
  replica_id => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition timestamp max_num_offsets
      partition => INT32
      timestamp => INT64
      max_num_offsets => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# timestamp: The target timestamp for the partition.
# max_num_offsets: Maximum offsets to return.


ListOffsetsRequestV1 => replica_id [topics]
  replica_id => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition timestamp
      partition => INT32
      timestamp => INT64

# replica_id: Broker id of the follower. For normal consumers, use -1.
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# timestamp: The target timestamp for the partition.


ListOffsetsRequestV2 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition timestamp
      partition => INT32
      timestamp => INT64

# replica_id: Broker id of the follower. For normal consumers, use -1.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# timestamp: The target timestamp for the partition.


ListOffsetsRequestV3 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition timestamp
      partition => INT32
      timestamp => INT64

# replica_id: Broker id of the follower. For normal consumers, use -1.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# timestamp: The target timestamp for the partition.


ListOffsetsRequestV4 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch timestamp
      partition => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: Broker id of the follower. For normal consumers, use -1.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# timestamp: The target timestamp for the partition.


ListOffsetsRequestV5 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch timestamp
      partition => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: Broker id of the follower. For normal consumers, use -1.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records
# topics: Topics to list offsets.
# topic: Name of topic
# partitions: Partitions to list offsets.
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# timestamp: The target timestamp for the partition.


ListOffsetsResponseV0 => [responses]
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code [offsets]
      partition => INT32
      error_code => INT16
      offsets => INT64

# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# offsets: A list of offsets.


ListOffsetsResponseV1 => [responses]
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code timestamp offset
      partition => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# timestamp: The timestamp associated with the returned offset
# offset: The offset found


ListOffsetsResponseV2 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code timestamp offset
      partition => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# timestamp: The timestamp associated with the returned offset
# offset: The offset found


ListOffsetsResponseV3 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code timestamp offset
      partition => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# timestamp: The timestamp associated with the returned offset
# offset: The offset found


ListOffsetsResponseV4 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code timestamp offset leader_epoch
      partition => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# timestamp: The timestamp associated with the returned offset
# offset: The offset found
# leader_epoch: The leader epoch


ListOffsetsResponseV5 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partition_responses]
    topic => STRING
    partition_responses => partition error_code timestamp offset leader_epoch
      partition => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# responses: The listed offsets by topic
# topic: Name of topic
# partition_responses: The listed offsets by partition
# partition: Topic partition id
# error_code: Response error code
# timestamp: The timestamp associated with the returned offset
# offset: The offset found
# leader_epoch: The leader epoch


#ApiKey: Metadata, 3
MetadataRequestV0 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV1 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV2 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV3 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV4 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV5 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV6 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV7 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV8 => [topics] allow_auto_topic_creation include_cluster_authorized_operations include_topic_authorized_operations
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN
  include_cluster_authorized_operations => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# include_topic_authorized_operations: Whether to include topic authorized operations.


MetadataRequestV9 => {topics} allow_auto_topic_creation include_cluster_authorized_operations include_topic_authorized_operations TAG_BUFFER
  topics => name TAG_BUFFER
    name => COMPACT_STRING
  allow_auto_topic_creation => BOOLEAN
  include_cluster_authorized_operations => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataResponseV0 => [brokers] [topics]
  brokers => node_id host port
    node_id => INT32
    host => STRING
    port => INT32
  topics => error_code name [partitions]
    error_code => INT16
    name => STRING
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV1 => [brokers] controller_id [topics]
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV2 => [brokers] cluster_id controller_id [topics]
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV3 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV4 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV5 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV6 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV7 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV8 => throttle_time_ms [brokers] cluster_id controller_id [topics] cluster_authorized_operations
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions] topic_authorized_operations
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.


MetadataResponseV9 => throttle_time_ms {brokers} cluster_id controller_id {topics} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: Each broker in the response.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


#ApiKey: OffsetCommit, 8
OffsetCommitRequestV0 => group_id [topics]
  group_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV1 => group_id generation_id member_id [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset commit_timestamp committed_metadata
      partition_index => INT32
      committed_offset => INT64
      commit_timestamp => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# commit_timestamp: The timestamp of the commit.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV2 => group_id generation_id member_id retention_time_ms [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV3 => group_id generation_id member_id retention_time_ms [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV4 => group_id generation_id member_id retention_time_ms [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV5 => group_id generation_id member_id [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV6 => group_id generation_id member_id [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV7 => group_id generation_id member_id group_instance_id [topics]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV8 => group_id generation_id member_id group_instance_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetCommitResponseV0 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV1 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV2 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV4 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV5 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV6 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV7 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV8 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: OffsetFetch, 9
OffsetFetchRequestV0 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV1 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV2 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV3 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV4 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV5 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV6 => group_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetFetchResponseV0 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16

# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.


OffsetFetchResponseV1 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16

# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.


OffsetFetchResponseV2 => [topics] error_code
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV3 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV4 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV5 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch metadata error_code
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV6 => throttle_time_ms {topics} error_code TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      metadata => COMPACT_NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The top-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: FindCoordinator, 10
FindCoordinatorRequestV0 => key
  key => STRING

# key: The coordinator key.


FindCoordinatorRequestV1 => key key_type
  key => STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type.  (Group, transaction, etc.)


FindCoordinatorRequestV2 => key key_type
  key => STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type.  (Group, transaction, etc.)


FindCoordinatorRequestV3 => key key_type TAG_BUFFER
  key => COMPACT_STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type.  (Group, transaction, etc.)
# _tagged_fields: The tagged fields


FindCoordinatorResponseV0 => error_code node_id host port
  error_code => INT16
  node_id => INT32
  host => STRING
  port => INT32

# error_code: The error code, or 0 if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV1 => throttle_time_ms error_code error_message node_id host port
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  node_id => INT32
  host => STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV2 => throttle_time_ms error_code error_message node_id host port
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  node_id => INT32
  host => STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV3 => throttle_time_ms error_code error_message node_id host port TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  node_id => INT32
  host => COMPACT_STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.
# _tagged_fields: The tagged fields


#ApiKey: JoinGroup, 11
JoinGroupRequestV0 => group_id session_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV1 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV2 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV3 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV4 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV5 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV6 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type {protocols} TAG_BUFFER
  group_id => COMPACT_STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_STRING
  protocols => name metadata TAG_BUFFER
    name => COMPACT_STRING
    metadata => COMPACT_BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupResponseV0 => error_code generation_id protocol_name leader member_id [members]
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV1 => error_code generation_id protocol_name leader member_id [members]
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV2 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV3 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV4 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV5 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id group_instance_id metadata
    member_id => STRING
    group_instance_id => NULLABLE_STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.


JoinGroupResponseV6 => throttle_time_ms error_code generation_id protocol_name leader member_id {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => COMPACT_STRING
  leader => COMPACT_STRING
  member_id => COMPACT_STRING
  members => member_id group_instance_id metadata TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    metadata => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: Heartbeat, 12
HeartbeatRequestV0 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV1 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV2 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV3 => group_id generation_id member_id group_instance_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.


HeartbeatRequestV4 => group_id generation_id member_id group_instance_id TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# _tagged_fields: The tagged fields


HeartbeatResponseV0 => error_code
  error_code => INT16

# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV3 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV4 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: LeaveGroup, 13
LeaveGroupRequestV0 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV1 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV2 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV3 => group_id [members]
  group_id => STRING
  members => member_id group_instance_id
    member_id => STRING
    group_instance_id => NULLABLE_STRING

# group_id: The ID of the group to leave.
# members: List of leaving member identities.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.


LeaveGroupRequestV4 => group_id {members} TAG_BUFFER
  group_id => COMPACT_STRING
  members => member_id group_instance_id TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING

# group_id: The ID of the group to leave.
# members: List of leaving member identities.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


LeaveGroupResponseV0 => error_code
  error_code => INT16

# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV3 => throttle_time_ms error_code [members]
  throttle_time_ms => INT32
  error_code => INT16
  members => member_id group_instance_id error_code
    member_id => STRING
    group_instance_id => NULLABLE_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# members: List of leaving member responses.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV4 => throttle_time_ms error_code {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  members => member_id group_instance_id error_code TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# members: List of leaving member responses.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: SyncGroup, 14
SyncGroupRequestV0 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV1 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV2 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV3 => group_id generation_id member_id group_instance_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV4 => group_id generation_id member_id group_instance_id {assignments} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  assignments => member_id assignment TAG_BUFFER
    member_id => COMPACT_STRING
    assignment => COMPACT_BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


SyncGroupResponseV0 => error_code assignment
  error_code => INT16
  assignment => BYTES

# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV1 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV2 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV3 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV4 => throttle_time_ms error_code assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  assignment => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.
# _tagged_fields: The tagged fields


#ApiKey: DescribeGroups, 15
DescribeGroupsRequestV0 => [groups]
  groups => STRING

# groups: The names of the groups to describe


DescribeGroupsRequestV1 => [groups]
  groups => STRING

# groups: The names of the groups to describe


DescribeGroupsRequestV2 => [groups]
  groups => STRING

# groups: The names of the groups to describe


DescribeGroupsRequestV3 => [groups] include_authorized_operations
  groups => STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe
# include_authorized_operations: Whether to include authorized operations.


DescribeGroupsRequestV4 => [groups] include_authorized_operations
  groups => STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe
# include_authorized_operations: Whether to include authorized operations.


DescribeGroupsRequestV5 => {groups} include_authorized_operations TAG_BUFFER
  groups => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


DescribeGroupsResponseV0 => [groups]
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV1 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV2 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV3 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members] authorized_operations
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.


DescribeGroupsResponseV4 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members] authorized_operations
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id group_instance_id client_id client_host member_metadata member_assignment
      member_id => STRING
      group_instance_id => NULLABLE_STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.


DescribeGroupsResponseV5 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data {members} authorized_operations TAG_BUFFER
    error_code => INT16
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    protocol_type => COMPACT_STRING
    protocol_data => COMPACT_STRING
    members => member_id group_instance_id client_id client_host member_metadata member_assignment TAG_BUFFER
      member_id => COMPACT_STRING
      group_instance_id => COMPACT_NULLABLE_STRING
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      member_metadata => COMPACT_BYTES
      member_assignment => COMPACT_BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListGroups, 16
ListGroupsRequestV0 => 



ListGroupsRequestV1 => 



ListGroupsRequestV2 => 



ListGroupsRequestV3 => TAG_BUFFER

# _tagged_fields: The tagged fields


ListGroupsResponseV0 => error_code [groups]
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV1 => throttle_time_ms error_code [groups]
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV2 => throttle_time_ms error_code [groups]
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV3 => throttle_time_ms error_code {groups} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type TAG_BUFFER
    group_id => COMPACT_STRING
    protocol_type => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: SaslHandshake, 17
SaslHandshakeRequestV0 => mechanism
  mechanism => STRING

# mechanism: The SASL mechanism chosen by the client.


SaslHandshakeRequestV1 => mechanism
  mechanism => STRING

# mechanism: The SASL mechanism chosen by the client.


SaslHandshakeResponseV0 => error_code [mechanisms]
  error_code => INT16
  mechanisms => STRING

# error_code: The error code, or 0 if there was no error.
# mechanisms: The mechanisms enabled in the server.


SaslHandshakeResponseV1 => error_code [mechanisms]
  error_code => INT16
  mechanisms => STRING

# error_code: The error code, or 0 if there was no error.
# mechanisms: The mechanisms enabled in the server.


#ApiKey: ApiVersions, 18
ApiVersionsRequestV0 => 



ApiVersionsRequestV1 => 



ApiVersionsRequestV2 => 



ApiVersionsRequestV3 => client_software_name client_software_version TAG_BUFFER
  client_software_name => COMPACT_STRING
  client_software_version => COMPACT_STRING

# client_software_name: The name of the client.
# client_software_version: The version of the client.
# _tagged_fields: The tagged fields


ApiVersionsResponseV0 => error_code [api_keys]
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.


ApiVersionsResponseV1 => error_code [api_keys] throttle_time_ms
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ApiVersionsResponseV2 => error_code [api_keys] throttle_time_ms
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ApiVersionsResponseV3 => error_code {api_keys} throttle_time_ms TAG_BUFFER
  error_code => INT16
  api_keys => api_key min_version max_version TAG_BUFFER
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: CreateTopics, 19
CreateTopicsRequestV0 => [topics] timeout_ms
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.


CreateTopicsRequestV1 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV2 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV3 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV4 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV5 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name num_partitions replication_factor {assignments} {configs} TAG_BUFFER
    name => COMPACT_STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index {broker_ids} TAG_BUFFER
      partition_index => INT32
      broker_ids => INT32
    configs => name value TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# _tagged_fields: The tagged fields
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.
# _tagged_fields: The tagged fields


CreateTopicsResponseV0 => [topics]
  topics => name error_code
    name => STRING
    error_code => INT16

# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.


CreateTopicsResponseV1 => [topics]
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV4 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV5 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name error_code error_message num_partitions replication_factor {configs} TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    num_partitions => INT32
    replication_factor => INT16
    configs => name value read_only config_source is_sensitive TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# num_partitions: Number of partitions of the topic.
# replication_factor: Replicator factor of the topic.
# configs: Configuration of the topic.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteTopics, 20
DeleteTopicsRequestV0 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV1 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV2 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV3 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV4 => {topic_names} timeout_ms TAG_BUFFER
  topic_names => COMPACT_STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.
# _tagged_fields: The tagged fields


DeleteTopicsResponseV0 => [responses]
  responses => name error_code
    name => STRING
    error_code => INT16

# responses: The results for each topic we tried to delete.
# name: The topic name
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV1 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV2 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV3 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV4 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => name error_code TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name
# error_code: The deletion error, or 0 if the deletion succeeded.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteRecords, 21
DeleteRecordsRequestV0 => [topics] timeout
  topics => topic [partitions]
    topic => STRING
    partitions => partition offset
      partition => INT32
      offset => INT64
  timeout => INT32

# topic: Name of topic
# partition: Topic partition id
# offset: The offset before which the messages will be deleted. -1 means high-watermark for the partition.
# timeout: The maximum time to await a response in ms.


DeleteRecordsRequestV1 => [topics] timeout
  topics => topic [partitions]
    topic => STRING
    partitions => partition offset
      partition => INT32
      offset => INT64
  timeout => INT32

# topic: Name of topic
# partition: Topic partition id
# offset: The offset before which the messages will be deleted. -1 means high-watermark for the partition.
# timeout: The maximum time to await a response in ms.


DeleteRecordsResponseV0 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition low_watermark error_code
      partition => INT32
      low_watermark => INT64
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# low_watermark: Smallest available offset of all live replicas
# error_code: Response error code


DeleteRecordsResponseV1 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition low_watermark error_code
      partition => INT32
      low_watermark => INT64
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# low_watermark: Smallest available offset of all live replicas
# error_code: Response error code


#ApiKey: InitProducerId, 22
InitProducerIdRequestV0 => transactional_id transaction_timeout_ms
  transactional_id => NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait for before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.


InitProducerIdRequestV1 => transactional_id transaction_timeout_ms
  transactional_id => NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait for before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.


InitProducerIdRequestV2 => transactional_id transaction_timeout_ms TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait for before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# _tagged_fields: The tagged fields


InitProducerIdResponseV0 => throttle_time_ms error_code producer_id producer_epoch
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.


InitProducerIdResponseV1 => throttle_time_ms error_code producer_id producer_epoch
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.


InitProducerIdResponseV2 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# _tagged_fields: The tagged fields


#ApiKey: OffsetForLeaderEpoch, 23
OffsetForLeaderEpochRequestV0 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => partition leader_epoch
      partition => INT32
      leader_epoch => INT32

# topics: An array of topics to get epochs for
# topic: Name of topic
# partitions: An array of partitions to get epochs for
# partition: Topic partition id
# leader_epoch: The epoch to lookup an offset for.


OffsetForLeaderEpochRequestV1 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => partition leader_epoch
      partition => INT32
      leader_epoch => INT32

# topics: An array of topics to get epochs for
# topic: Name of topic
# partitions: An array of partitions to get epochs for
# partition: Topic partition id
# leader_epoch: The epoch to lookup an offset for.


OffsetForLeaderEpochRequestV2 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch leader_epoch
      partition => INT32
      current_leader_epoch => INT32
      leader_epoch => INT32

# topics: An array of topics to get epochs for
# topic: Name of topic
# partitions: An array of partitions to get epochs for
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# leader_epoch: The epoch to lookup an offset for.


OffsetForLeaderEpochRequestV3 => replica_id [topics]
  replica_id => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch leader_epoch
      partition => INT32
      current_leader_epoch => INT32
      leader_epoch => INT32

# replica_id: Broker id of the follower. For normal consumers, use -1.
# topics: An array of topics to get epochs for
# topic: Name of topic
# partitions: An array of partitions to get epochs for
# partition: Topic partition id
# current_leader_epoch: The current leader epoch, if provided, is used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# leader_epoch: The epoch to lookup an offset for.


OffsetForLeaderEpochResponseV0 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition end_offset
      error_code => INT16
      partition => INT32
      end_offset => INT64

# topics: An array of topics for which we have leader offsets for some requested partition leader epoch
# topic: Name of topic
# partitions: An array of offsets by partition
# error_code: Response error code
# partition: Topic partition id
# end_offset: The end offset


OffsetForLeaderEpochResponseV1 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition leader_epoch end_offset
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# topics: An array of topics for which we have leader offsets for some requested partition leader epoch
# topic: Name of topic
# partitions: An array of offsets by partition
# error_code: Response error code
# partition: Topic partition id
# leader_epoch: The leader epoch
# end_offset: The end offset


OffsetForLeaderEpochResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition leader_epoch end_offset
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topics: An array of topics for which we have leader offsets for some requested partition leader epoch
# topic: Name of topic
# partitions: An array of offsets by partition
# error_code: Response error code
# partition: Topic partition id
# leader_epoch: The leader epoch
# end_offset: The end offset


OffsetForLeaderEpochResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition leader_epoch end_offset
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topics: An array of topics for which we have leader offsets for some requested partition leader epoch
# topic: Name of topic
# partitions: An array of offsets by partition
# error_code: Response error code
# partition: Topic partition id
# leader_epoch: The leader epoch
# end_offset: The end offset


#ApiKey: AddPartitionsToTxn, 24
AddPartitionsToTxnRequestV0 => transactional_id producer_id producer_epoch [topics]
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => topic [partitions]
    topic => STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# topic: Name of topic


AddPartitionsToTxnRequestV1 => transactional_id producer_id producer_epoch [topics]
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => topic [partitions]
    topic => STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# topic: Name of topic


AddPartitionsToTxnResponseV0 => throttle_time_ms [errors]
  throttle_time_ms => INT32
  errors => topic [partition_errors]
    topic => STRING
    partition_errors => partition error_code
      partition => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code


AddPartitionsToTxnResponseV1 => throttle_time_ms [errors]
  throttle_time_ms => INT32
  errors => topic [partition_errors]
    topic => STRING
    partition_errors => partition error_code
      partition => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code


#ApiKey: AddOffsetsToTxn, 25
AddOffsetsToTxnRequestV0 => transactional_id producer_id producer_epoch group_id
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier


AddOffsetsToTxnRequestV1 => transactional_id producer_id producer_epoch group_id
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier


AddOffsetsToTxnResponseV0 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code


AddOffsetsToTxnResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code


#ApiKey: EndTxn, 26
EndTxnRequestV0 => transactional_id producer_id producer_epoch transaction_result
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  transaction_result => BOOLEAN

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# transaction_result: The result of the transaction (0 = ABORT, 1 = COMMIT)


EndTxnRequestV1 => transactional_id producer_id producer_epoch transaction_result
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  transaction_result => BOOLEAN

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# transaction_result: The result of the transaction (0 = ABORT, 1 = COMMIT)


EndTxnResponseV0 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code


EndTxnResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code


#ApiKey: TxnOffsetCommit, 28
TxnOffsetCommitRequestV0 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitRequestV1 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitRequestV2 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of the last consumed record.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitResponseV0 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partitition index.
# error_code: The error code, or 0 if there was no error.


TxnOffsetCommitResponseV1 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partitition index.
# error_code: The error code, or 0 if there was no error.


TxnOffsetCommitResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partitition index.
# error_code: The error code, or 0 if there was no error.


#ApiKey: DescribeAcls, 29
DescribeAclsRequestV0 => resource_type resource_name principal host operation permission_type
  resource_type => INT8
  resource_name => NULLABLE_STRING
  principal => NULLABLE_STRING
  host => NULLABLE_STRING
  operation => INT8
  permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name filter
# principal: The ACL principal filter
# host: The ACL host filter
# operation: The ACL operation
# permission_type: The ACL permission type


DescribeAclsRequestV1 => resource_type resource_name resource_pattern_type_filter principal host operation permission_type
  resource_type => INT8
  resource_name => NULLABLE_STRING
  resource_pattern_type_filter => INT8
  principal => NULLABLE_STRING
  host => NULLABLE_STRING
  operation => INT8
  permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name filter
# resource_pattern_type_filter: The resource pattern type filter
# principal: The ACL principal filter
# host: The ACL host filter
# operation: The ACL operation
# permission_type: The ACL permission type


DescribeAclsResponseV0 => throttle_time_ms error_code error_message [resources]
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  resources => resource_type resource_name [acls]
    resource_type => INT8
    resource_name => STRING
    acls => principal host operation permission_type
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message
# resources: The resources and their associated ACLs.
# resource_type: The resource type
# resource_name: The resource name
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


DescribeAclsResponseV1 => throttle_time_ms error_code error_message [resources]
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  resources => resource_type resource_name resource_pattern_type [acls]
    resource_type => INT8
    resource_name => STRING
    resource_pattern_type => INT8
    acls => principal host operation permission_type
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message
# resources: The resources and their associated ACLs.
# resource_type: The resource type
# resource_name: The resource name
# resource_pattern_type: The resource pattern type
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


#ApiKey: CreateAcls, 30
CreateAclsRequestV0 => [creations]
  creations => resource_type resource_name principal host operation permission_type
    resource_type => INT8
    resource_name => STRING
    principal => STRING
    host => STRING
    operation => INT8
    permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


CreateAclsRequestV1 => [creations]
  creations => resource_type resource_name resource_pattern_type principal host operation permission_type
    resource_type => INT8
    resource_name => STRING
    resource_pattern_type => INT8
    principal => STRING
    host => STRING
    operation => INT8
    permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name
# resource_pattern_type: The resource pattern type
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


CreateAclsResponseV0 => throttle_time_ms [creation_responses]
  throttle_time_ms => INT32
  creation_responses => error_code error_message
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


CreateAclsResponseV1 => throttle_time_ms [creation_responses]
  throttle_time_ms => INT32
  creation_responses => error_code error_message
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


#ApiKey: DeleteAcls, 31
DeleteAclsRequestV0 => [filters]
  filters => resource_type resource_name principal host operation permission_type
    resource_type => INT8
    resource_name => NULLABLE_STRING
    principal => NULLABLE_STRING
    host => NULLABLE_STRING
    operation => INT8
    permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name filter
# principal: The ACL principal filter
# host: The ACL host filter
# operation: The ACL operation
# permission_type: The ACL permission type


DeleteAclsRequestV1 => [filters]
  filters => resource_type resource_name resource_pattern_type_filter principal host operation permission_type
    resource_type => INT8
    resource_name => NULLABLE_STRING
    resource_pattern_type_filter => INT8
    principal => NULLABLE_STRING
    host => NULLABLE_STRING
    operation => INT8
    permission_type => INT8

# resource_type: The resource type
# resource_name: The resource name filter
# resource_pattern_type_filter: The resource pattern type filter
# principal: The ACL principal filter
# host: The ACL host filter
# operation: The ACL operation
# permission_type: The ACL permission type


DeleteAclsResponseV0 => throttle_time_ms [filter_responses]
  throttle_time_ms => INT32
  filter_responses => error_code error_message [matching_acls]
    error_code => INT16
    error_message => NULLABLE_STRING
    matching_acls => error_code error_message resource_type resource_name principal host operation permission_type
      error_code => INT16
      error_message => NULLABLE_STRING
      resource_type => INT8
      resource_name => STRING
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message
# matching_acls: The matching ACLs
# error_code: Response error code
# error_message: Response error message
# resource_type: The resource type
# resource_name: The resource name
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


DeleteAclsResponseV1 => throttle_time_ms [filter_responses]
  throttle_time_ms => INT32
  filter_responses => error_code error_message [matching_acls]
    error_code => INT16
    error_message => NULLABLE_STRING
    matching_acls => error_code error_message resource_type resource_name resource_pattern_type principal host operation permission_type
      error_code => INT16
      error_message => NULLABLE_STRING
      resource_type => INT8
      resource_name => STRING
      resource_pattern_type => INT8
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message
# matching_acls: The matching ACLs
# error_code: Response error code
# error_message: Response error message
# resource_type: The resource type
# resource_name: The resource name
# resource_pattern_type: The resource pattern type
# principal: The ACL principal
# host: The ACL host
# operation: The ACL operation
# permission_type: The ACL permission type


#ApiKey: DescribeConfigs, 32
DescribeConfigsRequestV0 => [resources]
  resources => resource_type resource_name [config_names]
    resource_type => INT8
    resource_name => STRING
    config_names => STRING

# resources: An array of config resources to be returned.


DescribeConfigsRequestV1 => [resources] include_synonyms
  resources => resource_type resource_name [config_names]
    resource_type => INT8
    resource_name => STRING
    config_names => STRING
  include_synonyms => BOOLEAN

# resources: An array of config resources to be returned.


DescribeConfigsRequestV2 => [resources] include_synonyms
  resources => resource_type resource_name [config_names]
    resource_type => INT8
    resource_name => STRING
    config_names => STRING
  include_synonyms => BOOLEAN

# resources: An array of config resources to be returned.


DescribeConfigsResponseV0 => throttle_time_ms [resources]
  throttle_time_ms => INT32
  resources => error_code error_message resource_type resource_name [config_entries]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    config_entries => config_name config_value read_only is_default is_sensitive
      config_name => STRING
      config_value => NULLABLE_STRING
      read_only => BOOLEAN
      is_default => BOOLEAN
      is_sensitive => BOOLEAN

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


DescribeConfigsResponseV1 => throttle_time_ms [resources]
  throttle_time_ms => INT32
  resources => error_code error_message resource_type resource_name [config_entries]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]
      config_name => STRING
      config_value => NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      config_synonyms => config_name config_value config_source
        config_name => STRING
        config_value => NULLABLE_STRING
        config_source => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


DescribeConfigsResponseV2 => throttle_time_ms [resources]
  throttle_time_ms => INT32
  resources => error_code error_message resource_type resource_name [config_entries]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]
      config_name => STRING
      config_value => NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      config_synonyms => config_name config_value config_source
        config_name => STRING
        config_value => NULLABLE_STRING
        config_source => INT8

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


#ApiKey: AlterConfigs, 33
AlterConfigsRequestV0 => [resources] validate_only
  resources => resource_type resource_name [config_entries]
    resource_type => INT8
    resource_name => STRING
    config_entries => config_name config_value
      config_name => STRING
      config_value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: An array of resources to update with the provided configs.
# config_name: Configuration name
# config_value: Configuration value


AlterConfigsRequestV1 => [resources] validate_only
  resources => resource_type resource_name [config_entries]
    resource_type => INT8
    resource_name => STRING
    config_entries => config_name config_value
      config_name => STRING
      config_value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: An array of resources to update with the provided configs.
# config_name: Configuration name
# config_value: Configuration value


AlterConfigsResponseV0 => throttle_time_ms [resources]
  throttle_time_ms => INT32
  resources => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


AlterConfigsResponseV1 => throttle_time_ms [resources]
  throttle_time_ms => INT32
  resources => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# error_message: Response error message


#ApiKey: AlterReplicaLogDirs, 34
AlterReplicaLogDirsRequestV0 => [log_dirs]
  log_dirs => log_dir [topics]
    log_dir => STRING
    topics => topic [partitions]
      topic => STRING
      partitions => INT32

# log_dir: The absolute log directory path.
# topic: Name of topic
# partitions: List of partition ids of the topic.


AlterReplicaLogDirsRequestV1 => [log_dirs]
  log_dirs => log_dir [topics]
    log_dir => STRING
    topics => topic [partitions]
      topic => STRING
      partitions => INT32

# log_dir: The absolute log directory path.
# topic: Name of topic
# partitions: List of partition ids of the topic.


AlterReplicaLogDirsResponseV0 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition error_code
      partition => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code


AlterReplicaLogDirsResponseV1 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition error_code
      partition => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic: Name of topic
# partition: Topic partition id
# error_code: Response error code


#ApiKey: DescribeLogDirs, 35
DescribeLogDirsRequestV0 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => INT32

# topic: Name of topic
# partitions: List of partition ids of the topic.


DescribeLogDirsRequestV1 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => INT32

# topic: Name of topic
# partitions: List of partition ids of the topic.


DescribeLogDirsResponseV0 => throttle_time_ms [log_dirs]
  throttle_time_ms => INT32
  log_dirs => error_code log_dir [topics]
    error_code => INT16
    log_dir => STRING
    topics => topic [partitions]
      topic => STRING
      partitions => partition size offset_lag is_future
        partition => INT32
        size => INT64
        offset_lag => INT64
        is_future => BOOLEAN

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# log_dir: The absolute log directory path.
# topic: Name of topic
# partition: Topic partition id
# size: The size of the log segments of the partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition)
# is_future: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.


DescribeLogDirsResponseV1 => throttle_time_ms [log_dirs]
  throttle_time_ms => INT32
  log_dirs => error_code log_dir [topics]
    error_code => INT16
    log_dir => STRING
    topics => topic [partitions]
      topic => STRING
      partitions => partition size offset_lag is_future
        partition => INT32
        size => INT64
        offset_lag => INT64
        is_future => BOOLEAN

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# error_code: Response error code
# log_dir: The absolute log directory path.
# topic: Name of topic
# partition: Topic partition id
# size: The size of the log segments of the partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition)
# is_future: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.


#ApiKey: SaslAuthenticate, 36
SaslAuthenticateRequestV0 => auth_bytes
  auth_bytes => BYTES

# auth_bytes: The SASL authentication bytes from the client, as defined by the SASL mechanism.


SaslAuthenticateRequestV1 => auth_bytes
  auth_bytes => BYTES

# auth_bytes: The SASL authentication bytes from the client, as defined by the SASL mechanism.


SaslAuthenticateResponseV0 => error_code error_message auth_bytes
  error_code => INT16
  error_message => NULLABLE_STRING
  auth_bytes => BYTES

# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# auth_bytes: The SASL authentication bytes from the server, as defined by the SASL mechanism.


SaslAuthenticateResponseV1 => error_code error_message auth_bytes session_lifetime_ms
  error_code => INT16
  error_message => NULLABLE_STRING
  auth_bytes => BYTES
  session_lifetime_ms => INT64

# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# auth_bytes: The SASL authentication bytes from the server, as defined by the SASL mechanism.
# session_lifetime_ms: The SASL authentication bytes from the server, as defined by the SASL mechanism.


#ApiKey: CreatePartitions, 37
CreatePartitionsRequestV0 => [topic_partitions] timeout validate_only
  topic_partitions => topic new_partitions
    topic => STRING
    new_partitions => count [assignment]
      count => INT32
      assignment => ARRAY(INT32)
  timeout => INT32
  validate_only => BOOLEAN

# topic_partitions: List of topic and the corresponding new partitions.
# topic: Name of topic
# count: The new partition count.
# assignment: The assigned brokers.
# timeout: The time in ms to wait for the partitions to be created.
# validate_only: If true then validate the request, but don't actually increase the number of partitions.


CreatePartitionsRequestV1 => [topic_partitions] timeout validate_only
  topic_partitions => topic new_partitions
    topic => STRING
    new_partitions => count [assignment]
      count => INT32
      assignment => ARRAY(INT32)
  timeout => INT32
  validate_only => BOOLEAN

# topic_partitions: List of topic and the corresponding new partitions.
# topic: Name of topic
# count: The new partition count.
# assignment: The assigned brokers.
# timeout: The time in ms to wait for the partitions to be created.
# validate_only: If true then validate the request, but don't actually increase the number of partitions.


CreatePartitionsResponseV0 => throttle_time_ms [topic_errors]
  throttle_time_ms => INT32
  topic_errors => topic error_code error_message
    topic => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic_errors: Per topic results for the create partitions request
# topic: Name of topic
# error_code: Response error code
# error_message: Response error message


CreatePartitionsResponseV1 => throttle_time_ms [topic_errors]
  throttle_time_ms => INT32
  topic_errors => topic error_code error_message
    topic => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to quota violation (Zero if the request did not violate any quota)
# topic_errors: Per topic results for the create partitions request
# topic: Name of topic
# error_code: Response error code
# error_message: Response error message


#ApiKey: CreateDelegationToken, 38
CreateDelegationTokenRequestV0 => [renewers] max_lifetime_ms
  renewers => principal_type principal_name
    principal_type => STRING
    principal_name => STRING
  max_lifetime_ms => INT64

# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.


CreateDelegationTokenRequestV1 => [renewers] max_lifetime_ms
  renewers => principal_type principal_name
    principal_type => STRING
    principal_name => STRING
  max_lifetime_ms => INT64

# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.


CreateDelegationTokenRequestV2 => {renewers} max_lifetime_ms TAG_BUFFER
  renewers => principal_type principal_name TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING
  max_lifetime_ms => INT64

# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# _tagged_fields: The tagged fields
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.
# _tagged_fields: The tagged fields


CreateDelegationTokenResponseV0 => error_code principal_type principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms
  error_code => INT16
  principal_type => STRING
  principal_name => STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => STRING
  hmac => BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


CreateDelegationTokenResponseV1 => error_code principal_type principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms
  error_code => INT16
  principal_type => STRING
  principal_name => STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => STRING
  hmac => BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


CreateDelegationTokenResponseV2 => error_code principal_type principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms TAG_BUFFER
  error_code => INT16
  principal_type => COMPACT_STRING
  principal_name => COMPACT_STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => COMPACT_STRING
  hmac => COMPACT_BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: RenewDelegationToken, 39
RenewDelegationTokenRequestV0 => hmac renew_period_ms
  hmac => BYTES
  renew_period_ms => INT64

# hmac: The HMAC of the delegation token to be renewed.
# renew_period_ms: The renewal time period in milliseconds.


RenewDelegationTokenRequestV1 => hmac renew_period_ms
  hmac => BYTES
  renew_period_ms => INT64

# hmac: The HMAC of the delegation token to be renewed.
# renew_period_ms: The renewal time period in milliseconds.


RenewDelegationTokenResponseV0 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


RenewDelegationTokenResponseV1 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


#ApiKey: ExpireDelegationToken, 40
ExpireDelegationTokenRequestV0 => hmac expiry_time_period_ms
  hmac => BYTES
  expiry_time_period_ms => INT64

# hmac: The HMAC of the delegation token to be expired.
# expiry_time_period_ms: The expiry time period in milliseconds.


ExpireDelegationTokenRequestV1 => hmac expiry_time_period_ms
  hmac => BYTES
  expiry_time_period_ms => INT64

# hmac: The HMAC of the delegation token to be expired.
# expiry_time_period_ms: The expiry time period in milliseconds.


ExpireDelegationTokenResponseV0 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ExpireDelegationTokenResponseV1 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


#ApiKey: DescribeDelegationToken, 41
DescribeDelegationTokenRequestV0 => [owners]
  owners => principal_type principal_name
    principal_type => STRING
    principal_name => STRING

# owners: Each owner that we want to describe delegation tokens for, or null to describe all tokens.
# principal_type: The owner principal type.
# principal_name: The owner principal name.


DescribeDelegationTokenRequestV1 => [owners]
  owners => principal_type principal_name
    principal_type => STRING
    principal_name => STRING

# owners: Each owner that we want to describe delegation tokens for, or null to describe all tokens.
# principal_type: The owner principal type.
# principal_name: The owner principal name.


DescribeDelegationTokenResponseV0 => error_code [tokens] throttle_time_ms
  error_code => INT16
  tokens => principal_type principal_name issue_timestamp expiry_timestamp max_timestamp token_id hmac [renewers]
    principal_type => STRING
    principal_name => STRING
    issue_timestamp => INT64
    expiry_timestamp => INT64
    max_timestamp => INT64
    token_id => STRING
    hmac => BYTES
    renewers => principal_type principal_name
      principal_type => STRING
      principal_name => STRING
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# tokens: The tokens.
# principal_type: The token principal type.
# principal_name: The token principal name.
# issue_timestamp: The token issue timestamp in milliseconds.
# expiry_timestamp: The token expiry timestamp in milliseconds.
# max_timestamp: The token maximum timestamp length in milliseconds.
# token_id: The token ID.
# hmac: The token HMAC.
# renewers: Those who are able to renew this token before it expires.
# principal_type: The renewer principal type
# principal_name: The renewer principal name
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


DescribeDelegationTokenResponseV1 => error_code [tokens] throttle_time_ms
  error_code => INT16
  tokens => principal_type principal_name issue_timestamp expiry_timestamp max_timestamp token_id hmac [renewers]
    principal_type => STRING
    principal_name => STRING
    issue_timestamp => INT64
    expiry_timestamp => INT64
    max_timestamp => INT64
    token_id => STRING
    hmac => BYTES
    renewers => principal_type principal_name
      principal_type => STRING
      principal_name => STRING
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# tokens: The tokens.
# principal_type: The token principal type.
# principal_name: The token principal name.
# issue_timestamp: The token issue timestamp in milliseconds.
# expiry_timestamp: The token expiry timestamp in milliseconds.
# max_timestamp: The token maximum timestamp length in milliseconds.
# token_id: The token ID.
# hmac: The token HMAC.
# renewers: Those who are able to renew this token before it expires.
# principal_type: The renewer principal type
# principal_name: The renewer principal name
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


#ApiKey: DeleteGroups, 42
DeleteGroupsRequestV0 => [groups_names]
  groups_names => STRING

# groups_names: The group names to delete.


DeleteGroupsRequestV1 => [groups_names]
  groups_names => STRING

# groups_names: The group names to delete.


DeleteGroupsRequestV2 => {groups_names} TAG_BUFFER
  groups_names => COMPACT_STRING

# groups_names: The group names to delete.
# _tagged_fields: The tagged fields


DeleteGroupsResponseV0 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => group_id error_code
    group_id => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results
# group_id: The group id
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteGroupsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => group_id error_code
    group_id => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results
# group_id: The group id
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteGroupsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => group_id error_code TAG_BUFFER
    group_id => COMPACT_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results
# group_id: The group id
# error_code: The deletion error, or 0 if the deletion succeeded.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ElectLeaders, 43
ElectLeadersRequestV0 => [topic_partitions] timeout_ms
  topic_partitions => topic [partition_id]
    topic => STRING
    partition_id => INT32
  timeout_ms => INT32

# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partition_id: The partitions of this topic whose leader should be elected.
# timeout_ms: The time in ms to wait for the election to complete.


ElectLeadersRequestV1 => election_type [topic_partitions] timeout_ms
  election_type => INT8
  topic_partitions => topic [partition_id]
    topic => STRING
    partition_id => INT32
  timeout_ms => INT32

# election_type: Type of elections to conduct for the partition. A value of '0' elects the preferred replica. A value of '1' elects the first live replica if there are no in-sync replica.
# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partition_id: The partitions of this topic whose leader should be elected.
# timeout_ms: The time in ms to wait for the election to complete.


ElectLeadersRequestV2 => election_type {topic_partitions} timeout_ms TAG_BUFFER
  election_type => INT8
  topic_partitions => topic {partition_id} TAG_BUFFER
    topic => COMPACT_STRING
    partition_id => INT32
  timeout_ms => INT32

# election_type: Type of elections to conduct for the partition. A value of '0' elects the preferred replica. A value of '1' elects the first live replica if there are no in-sync replica.
# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partition_id: The partitions of this topic whose leader should be elected.
# _tagged_fields: The tagged fields
# timeout_ms: The time in ms to wait for the election to complete.
# _tagged_fields: The tagged fields


ElectLeadersResponseV0 => throttle_time_ms [replica_election_results]
  throttle_time_ms => INT32
  replica_election_results => topic [partition_result]
    topic => STRING
    partition_result => partition_id error_code error_message
      partition_id => INT32
      error_code => INT16
      error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name
# partition_result: The results for each partition
# partition_id: The partition id
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


ElectLeadersResponseV1 => throttle_time_ms error_code [replica_election_results]
  throttle_time_ms => INT32
  error_code => INT16
  replica_election_results => topic [partition_result]
    topic => STRING
    partition_result => partition_id error_code error_message
      partition_id => INT32
      error_code => INT16
      error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name
# partition_result: The results for each partition
# partition_id: The partition id
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


ElectLeadersResponseV2 => throttle_time_ms error_code {replica_election_results} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  replica_election_results => topic {partition_result} TAG_BUFFER
    topic => COMPACT_STRING
    partition_result => partition_id error_code error_message TAG_BUFFER
      partition_id => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name
# partition_result: The results for each partition
# partition_id: The partition id
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: IncrementalAlterConfigs, 44
IncrementalAlterConfigsRequestV0 => [resources] validate_only
  resources => resource_type resource_name [configs]
    resource_type => INT8
    resource_name => STRING
    configs => name config_operation value
      name => STRING
      config_operation => INT8
      value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The incremental updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# config_operation: The type (Set, Delete, Append, Subtract) of operation.
# value: The value to set for the configuration key.
# validate_only: True if we should validate the request, but not change the configurations.


IncrementalAlterConfigsRequestV1 => {resources} validate_only TAG_BUFFER
  resources => resource_type resource_name {configs} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    configs => name config_operation value TAG_BUFFER
      name => COMPACT_STRING
      config_operation => INT8
      value => COMPACT_NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The incremental updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# config_operation: The type (Set, Delete, Append, Subtract) of operation.
# value: The value to set for the configuration key.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# validate_only: True if we should validate the request, but not change the configurations.
# _tagged_fields: The tagged fields


IncrementalAlterConfigsResponseV0 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.


IncrementalAlterConfigsResponseV1 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    resource_type => INT8
    resource_name => COMPACT_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterPartitionReassignments, 45
AlterPartitionReassignmentsRequestV0 => timeout_ms {topics} TAG_BUFFER
  timeout_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index {replicas} TAG_BUFFER
      partition_index => INT32
      replicas => INT32

# timeout_ms: The time in ms to wait for the request to complete.
# topics: The topics to reassign.
# name: The topic name.
# partitions: The partitions to reassign.
# partition_index: The partition index.
# replicas: The replicas to place the partitions on, or null to cancel a pending reassignment for this partition.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterPartitionReassignmentsResponseV0 => throttle_time_ms error_code error_message {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code error_message TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# responses: The responses to topics to reassign.
# name: The topic name
# partitions: The responses to partitions to reassign
# partition_index: The partition index.
# error_code: The error code for this partition, or 0 if there was no error.
# error_message: The error message for this partition, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListPartitionReassignments, 46
ListPartitionReassignmentsRequestV0 => timeout_ms {topics} TAG_BUFFER
  timeout_ms => INT32
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32

# timeout_ms: The time in ms to wait for the request to complete.
# topics: The topics to list partition reassignments for, or null to list everything.
# name: The topic name
# partition_indexes: The partitions to list partition reassignments for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListPartitionReassignmentsResponseV0 => throttle_time_ms error_code error_message {topics} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index {replicas} {adding_replicas} {removing_replicas} TAG_BUFFER
      partition_index => INT32
      replicas => INT32
      adding_replicas => INT32
      removing_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error
# error_message: The top-level error message, or null if there was no error.
# topics: The ongoing reassignments for each topic.
# name: The topic name.
# partitions: The ongoing reassignments for each partition.
# partition_index: The index of the partition.
# replicas: The current replica set.
# adding_replicas: The set of replicas we are currently adding.
# removing_replicas: The set of replicas we are currently removing.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: OffsetDelete, 47
OffsetDeleteRequestV0 => group_id [topics]
  group_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index
      partition_index => INT32

# group_id: The unique group identifier.
# topics: The topics to delete offsets for
# name: The topic name.
# partitions: Each partition to delete offsets for.
# partition_index: The partition index.


OffsetDeleteResponseV0 => error_code throttle_time_ms [topics]
  error_code => INT16
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# error_code: The top-level error code, or 0 if there was no error.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


